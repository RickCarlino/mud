#All controllers should inherit from here
class AbstractController

  attr_accessor :session

  # Instantiates a new controller instance. It is highly recomended that derived
  # controller classes use the +super+ keyword for future versions.
  #
  # * +session+ - (Session) The connection session that the controller will
  # communicate with.
  def initialize(session)
    @session = session
    on_create
    nil
  end

  # User definable callback called after instantiation. Return values are
  # silenced to nil when called by the controller's constructor.
  def on_create
  end

  # Parses any string sent from user to the server via TCP Socket within the
  # format of 'COMMAND_NAME ARG1 ARG2 ARG3......'. Only executes the command if
  # the action name is found within the whitelist generated by the
  # allowed_methods() Array.
  def get_text(command)
    parse_command command
  end

  # Sends a string to remote client over the TCP socket connection.
  def send_text(command)
    @session.connection.puts(command)
  end

  # Parses arbitrary user input string into a format usable by the interpreter.
  # Dynamicly returns the result of the method that was intended to be called.
  # Typically not used directly.
  #
  # * +command+ - (String) A string of space seperated commands and arguments
  #
  #    parse_command('login user_x password123')
  #    # => True
  def parse_command(command)
    command = command.split(' ')
    head    = command.shift
    tail    = command
    interpret_command head.to_s.downcase, tail
  end

  # Interprets a controller command (first argument) along with its argument
  # list as a string seperated by spaces. Returns the return value of the target
  # method.
  #
  # * +head+ - (String) The command to execute. Will only execute the command if
  # it within the 'allowed_methods' dynamic array.
  # * +tail+ - (String) A string of space seperated arguments that are passed to
  # the method being called.
  #
  #    interpret_command('add', '1 2 3 4') # Assumes the current controller has
  #                                        # an add() method defined and within
  #    # => 10                             # the allowed_methods Array.
  def interpret_command(head, tail)
    if allowed_methods.include? head
      begin
        self.send(head, *tail)
      rescue
        send_text 'You just broke something. Please tell the admins about this.'
      end
    else
      send_error
    end
  end

  def send_error
    send_text funny_responses.sample
  end

  # Private parameterless method used for generating quirky messages when the
  # user attempts to use a non-existant / forbidden controller action. Returns
  # String.
  def funny_responses
    [
      'Huh?',
      "What's that you say?",
      'come again?',
      "Sorry, I don't know that command."
    ]
  end

  # Dynamically generated list of user accesible controller methods. By default
  # (and when used in conjugation with +super+ in derived classes), will return
  # ['quit'] as its only accessible method. Returns Array of Strings.
  def allowed_methods
    ['quit']
  end

  # Void paramaterless controller action that closes TCP socket to client.
  def quit(*args)
    session.connection.close
  end

end